{"version":3,"file":"app-task-view.component.js","sourceRoot":"","sources":["../../../../src/app/app-task-view/app-task-view.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {AfterViewChecked, AfterViewInit, Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {Task} from 'protractor/built/taskScheduler';\nimport * as BABYLON from 'babylonjs';\n\n@Component({\n    selector: 'app-task-view',\n    templateUrl: './app-task-view.component.html',\n    styleUrls: ['./app-task-view.component.css']\n})\nexport class AppTaskViewComponent implements AfterViewChecked {\n\n    // TODO : provide it as a service\n    static STATES: { [key: string]: string; } = {\n        '0': 'assets/images/CREATED.png',\n        '1': 'assets/images/STARTED.png',\n        '2': 'assets/images/PAUSED.png',\n        '3': 'assets/images/FINISHED.png',\n        '4': 'assets/images/ABORTED.png'\n    };\n\n    @Input() task: Task;\n    private babylonIsRunning: boolean;\n\n    states: { [key: string]: string; };\n\n    private static createScene(engine: BABYLON.Engine, canvas: HTMLCanvasElement): BABYLON.Scene {\n        // Now create a basic Babylon Scene object\n        const scene = new BABYLON.Scene(engine);\n\n        // Change the scene background color to green.\n        scene.clearColor = new BABYLON.Color3(0, 1, 0);\n\n        // This creates and positions a free camera\n        const camera = new BABYLON.ArcRotateCamera('ArcRotateCamera', 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);\n\n        // This targets the camera to scene origin\n        camera.setTarget(BABYLON.Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, false);\n\n        // This creates a light, aiming 0,1,0 - to the sky.\n        const light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), scene);\n\n        // Dim the light a small amount\n        light.intensity = .5;\n\n        // Let's try our built-in 'sphere' shape. Params: name, subdivisions, size, scene\n        const sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene);\n\n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 1;\n\n        // Let's try our built-in 'ground' shape.  Params: name, width, depth, subdivisions, scene\n        const ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene);\n\n        // Leave this function\n        return scene;\n    }\n\n    constructor() {\n        this.states = AppTaskViewComponent.STATES;\n        this.babylonIsRunning = false;\n    }\n\n    ngAfterViewChecked(): void {\n        if (this.task !== undefined && this.task !== null && !this.babylonIsRunning) {\n            const canvas = document.getElementById('babylon-canvas') as HTMLCanvasElement;\n            if (canvas !== null) {\n                this.babylonIsRunning = true;\n                this.babylonInitialization(canvas);\n            }\n        }\n    }\n\n    private babylonInitialization(canvas: HTMLCanvasElement) {\n        const engine = new BABYLON.Engine(canvas, true);\n\n        // create a basic BJS Scene object\n        const scene = AppTaskViewComponent.createScene(engine, canvas);\n\n        engine.runRenderLoop(function () {\n            scene.render();\n        });\n    }\n}\n"]}