{"version":3,"file":"task.service.js","sourceRoot":"","sources":["../../../../src/app/api-firefly/task.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, RequestOptions, Response, Headers} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {Task} from './data/Task';\n\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class TaskService {\n\n    private static TASKS_URL = 'api/v1/tasks';  // URL to web API\n    private static NAMES_URL = 'api/v1/names';  // URL to web API\n    private static CATEGORIES_URL = 'api/v1/categories';  // URL to web API\n\n    private static extractData(res: Response) {\n        return res.json() || {};\n    }\n\n    public static handleError(error: Response | any) {\n        // In a real world app, you might use a remote logging infrastructure\n        let errMsg: string;\n        if (error instanceof Response) {\n            const body = error.json() || '';\n            const err = body.error || JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n\n    constructor(private http: Http) {\n    }\n\n    getTasks(): Observable<Task[]> {\n        return this.http.get(TaskService.TASKS_URL)\n            .map(TaskService.extractData)\n            .catch(TaskService.handleError);\n    }\n\n    createTask(task: Task): Observable<Task> {\n        const headers = new Headers({'Content-Type': 'application/json'});\n        const options = new RequestOptions({headers: headers});\n        console.log(task);\n        console.log(JSON.stringify(task));\n        return this.http.post(TaskService.TASKS_URL, JSON.stringify(task), options)\n            .map(TaskService.extractData)\n            .catch(TaskService.handleError);\n    }\n\n    getNames(): Observable<string[]> {\n        return this.http.get(TaskService.NAMES_URL)\n            .map(TaskService.extractData)\n            .catch(TaskService.handleError);\n    }\n\n    getCategories(): Observable<string[]> {\n        return this.http.get(TaskService.CATEGORIES_URL)\n            .map(TaskService.extractData)\n            .catch(TaskService.handleError);\n    }\n\n}\n"]}