{"version":3,"file":"module.service.js","sourceRoot":"","sources":["../../../../src/app/api-firefly/module.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAyC;AACzC,sCAAsE;AACtE,8CAA2C;AAE3C,mCAAiC;AACjC,iCAA+B;AAC/B,qCAAmC;AAInC,gDAAgD;AAEhD,IAAa,aAAa;IAsBtB,uBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAC9B,CAAC;IAnBc,yBAAW,GAA1B,UAA2B,GAAa;QACpC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IAC5B,CAAC;IAEa,yBAAW,GAAzB,UAA0B,KAAqB;QAC3C,qEAAqE;QACrE,IAAI,MAAc,CAAC;QACnB,EAAE,CAAC,CAAC,KAAK,YAAY,eAAQ,CAAC,CAAC,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;QAClE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC9D,CAAC;QACD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAKD,kCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAa,CAAC,WAAW,CAAC;aAC1C,GAAG,CAAC,eAAa,CAAC,WAAW,CAAC;aAC9B,KAAK,CAAC,eAAa,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IACL,oBAAC;AAAD,CAAC,AA9BD,IA8BC;AA5BkB,yBAAW,GAAG,gBAAgB,CAAC,CAAE,iBAAiB;AAFxD,aAAa;IADzB,iBAAU,EAAE;qCAuBiB,WAAI;GAtBrB,aAAa,CA8BzB;AA9BY,sCAAa","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, RequestOptions, Response, Headers} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\n\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\nimport {Module} from './data/Module';\n\n\n// TODO make an unique class for all firefly api\n@Injectable()\nexport class ModuleService {\n\n    private static MODULES_URL = 'api/v1/modules';  // URL to web API\n\n    private static extractData(res: Response) {\n        return res.json() || {};\n    }\n\n    public static handleError(error: Response | any) {\n        // In a real world app, you might use a remote logging infrastructure\n        let errMsg: string;\n        if (error instanceof Response) {\n            const body = error.json() || '';\n            const err = body.error || JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n\n    constructor(private http: Http) {\n    }\n\n    getModules(): Observable<Module[]> {\n        return this.http.get(ModuleService.MODULES_URL)\n            .map(ModuleService.extractData)\n            .catch(ModuleService.handleError);\n    }\n}\n"]}