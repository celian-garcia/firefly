// Copyright 2017 <Célian Garcia>
#include "firefly/controller.hpp"

namespace firefly {
namespace controller {

    using model::DatabaseManager;
    using model::FCloud3DModel;
    using model::FPoint3DModel;
    using model::FCloud3D;
    using model::FPoint3D;

    // TODO(célian):  this functions is very large ! I need to:
    //  - encapsulate both thread code into functions
    int start_module(thread_pool *pool, const std::string &name) {
        // - Initiate database connection;
        // - Initiate the cloud model with database manager;
        // - Insert cloud entry in the database
        //    -> return the id generated by the database.
        DatabaseManager db_manager("fcloudpopulation");
        FCloud3DModel cloud_model(&db_manager);
        int cloud_id = cloud_model.insertCloud(FCloud3D());

        SafeQueue<Operation>* operations = new SafeQueue<Operation>;

        // Initiate a first thread into the thread pool
        // This thread will write to the queue the cloud operations (add/delete)
        pool->enqueue([name, operations] {
            std::cout
                << "Thread starts for the module : " << name
                << std::endl;

            for (int i = 0; i < 10; ++i) {
                Sleep(1000);
                operations->enqueue(Operation(OperationType::ADD, cv::Vec3f(i, i, i)));
                std::cout << "Enqueue operation " << i << std::endl;
            }
            operations->enqueue(Operation(OperationType::END, cv::Vec3f(0, 0, 0)));

            std::cout
                << "Thread have finished the work for the module : " << name
                << std::endl;
        });

        // Initiate a second thread into the thread pool
        // This thread will listen the queue continuously to populate the
        // database cloud with listened points
        pool->enqueue([cloud_id, operations] {
            std::cout
                << "Thread starts for the cloud id : " << cloud_id
                << std::endl;

            // Initialize connection, cloud model, and point model
            DatabaseManager db_manager("fcloudpopulation");
            FCloud3DModel cloud_model(&db_manager);
            FPoint3DModel point_model(&db_manager);

            // Update the cloud state to populate
            FCloud3D cloud = cloud_model.getCloudById(cloud_id);
            cloud.setState("POPULATE");
            cloud_model.updateCloud(cloud);

            // Listen the operation queue and populate the database
            bool end_operation_found = false;
            while (!end_operation_found) {
                Operation op = operations->dequeue();
                end_operation_found = op.getType() == OperationType::END;
                std::cout << "Dequeue operation " << op.getX() << std::endl;

                // TODO(Célian): insert the operation into the database
                // using the point model.
            }

            // Update the cloud state to finished
            // FCloud3D cloud = cloud_model.getCloudById(cloud_id);
            // cloud.setState("FINISHED");
            // cloud_model.updateCloud(cloud)

            std::cout
                << "Thread have finished the work for the cloud_id : " << cloud_id
                << std::endl;
        });

        return cloud_id;
    }

    void listen_module() {}
}  // end namespace controller
}  // end namespace firefly
